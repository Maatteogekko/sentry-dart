// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Android native profiler bindings.
class AndroidNativeProfiler {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AndroidNativeProfiler(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AndroidNativeProfiler.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int Start(
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _Start(
      fname,
    );
  }

  late final _StartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ProfilerStart');
  late final _Start =
      _StartPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int StartWithOptions(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ProfilerOptions> options,
  ) {
    return _StartWithOptions(
      fname,
      options,
    );
  }

  late final _StartWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ProfilerOptions>)>>('ProfilerStartWithOptions');
  late final _StartWithOptions = _StartWithOptionsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ProfilerOptions>)>();

  void Stop() {
    return _Stop();
  }

  late final _StopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ProfilerStop');
  late final _Stop = _StopPtr.asFunction<void Function()>();

  void Flush() {
    return _Flush();
  }

  late final _FlushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ProfilerFlush');
  late final _Flush = _FlushPtr.asFunction<void Function()>();

  void RegisterThread() {
    return _RegisterThread();
  }

  late final _RegisterThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ProfilerRegisterThread');
  late final _RegisterThread = _RegisterThreadPtr.asFunction<void Function()>();

  void GetCurrentState(
    ffi.Pointer<ProfilerState> state,
  ) {
    return _GetCurrentState(
      state,
    );
  }

  late final _GetCurrentStatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ProfilerState>)>>(
      'ProfilerGetCurrentState');
  late final _GetCurrentState = _GetCurrentStatePtr.asFunction<
      void Function(ffi.Pointer<ProfilerState>)>();

  int GetStackTrace(
    ffi.Pointer<ffi.Pointer<ffi.Void>> result,
    int max_depth,
    int skip_count,
    ffi.Pointer<ffi.Void> uc,
  ) {
    return _GetStackTrace(
      result,
      max_depth,
      skip_count,
      uc,
    );
  }

  late final _GetStackTracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ProfilerGetStackTrace');
  late final _GetStackTrace = _GetStackTracePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int,
          ffi.Pointer<ffi.Void>)>();
}

class ProfilerOptions extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> arg)>>
      filter_in_thread;

  external ffi.Pointer<ffi.Void> filter_in_thread_arg;
}

class ProfilerState extends ffi.Struct {
  @ffi.Int()
  external int enabled;

  @ffi.Long()
  external int start_time;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> profile_name;

  @ffi.Int()
  external int samples_gathered;
}
